# This is a basic workflow to help you get started with Actions
name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: 
      - master
      - develop
      - develop/*
      - dev_*
  pull_request:
    branches: 
      - master

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # 由于此处没有Tag, 所以Tag从配置文件中读取
      - name: Init
        run: |
          source build/info
          git log --pretty=format:"%s" -1>CHANGELOG.md
          echo "GITHUB_REF: ${GITHUB_REF}"
          mkdir packages
          bash build/prepare.sh

      # 构建deb包 
      - name: Build deb
        run: |
          source build/info
          tag=${Version}
          echo "tag: ${tag}"
          echo ${{ steps.Init.outputs.TAG }}
          echo ${{ steps.Init.outputs.VERSION }}
          pwd_path=`pwd`
          echo "pwd_path: ${pwd_path}"
          Architecture_T=(${Architecture//,/ })
          for Arch in ${Architecture_T[@]}; do
            work_path="${pwd_path}/build/deb/${Arch}"
            #tag=${GITHUB_REF/refs\/tags\//}
            echo "work_path: ${work_path}"
            dpkg -b ${work_path} ${pwd_path}/packages/minecraftctl_${tag//v/}_${Arch}.deb
          done
          ls -lab
          ls -lab packages

      # 构建rpm包
      - name: Build RPM
        run: |
          source build/info
          tag=${Version}
          echo $PWD
          pwd_path=$PWD
          Architecture_T=(${Architecture//,/ })
          mkdir -p ${pwd_path}/packages
          docker run -itd -v ${pwd_path}:${pwd_path} --name centos7Instance --net="host" docker.io/centos:7 /bin/bash
          echo install rpmdevtools ing...
          docker exec -t centos7Instance yum install -y rpmdevtools>/dev/null
          echo install rpmdevtools Finish.
          work_path="${pwd_path}/build/rpm/"
          #tag=${GITHUB_REF/refs\/tags\//}
          echo "work_path: ${work_path}"
          docker exec -t centos7Instance cp -r ${work_path} /root/rpmbuild
          docker exec -t centos7Instance rpmdev-setuptree
          for Arch in ${Architecture_T[@]}; do
            docker exec -t centos7Instance rpmbuild -bb --target ${Arch/amd64/x86_64} /root/rpmbuild/SPECS/minecraftctl.spec
            docker exec -t centos7Instance cp /root/rpmbuild/RPMS/${Arch/amd64/x86_64}/minecraftctl-${Version}-1.el7.${Arch/amd64/x86_64}.rpm ${pwd_path}/packages/
          done
          docker exec -t centos7Instance rm -rf /root/rpmbuild
          docker kill -s KILL centos7Instance
          docker rm centos7Instance
          ls -lab packages

      # 上传包以在多个作业中共享
      - uses: actions/upload-artifact@v3
        name: upload amd64.deb
        with:
          name: amd64.deb
          path: packages/minecraftctl_*_amd64.deb
          if-no-files-found: error

      - uses: actions/upload-artifact@v3
        name: upload i386.deb
        with:
          name: i386.deb
          path: packages/minecraftctl_*i386.deb
          if-no-files-found: error

      - uses: actions/upload-artifact@v3
        name: upload amd64.rpm
        with:
          name: amd64.rpm
          path: packages/minecraftctl-*.x86_64.rpm
          if-no-files-found: error

      - uses: actions/upload-artifact@v3
        name: upload i386.rpm
        with:
          name: i386.rpm
          path: packages/minecraftctl-*.i386.rpm
          if-no-files-found: error
      # Releases(这个字段是用于发布的字段)
      # - name: Releases
      #   if: startsWith(github.ref, 'refs/tags/')
      #   uses: softprops/action-gh-release@v1 
      #   with:
      #     body_path: CHANGELOG.md
      #     files: |
      #       minecraftctl_${{ steps.init.outputs.VERSION }}_x86_64.deb
      #       minecraftctl-${{ steps.init.outputs.VERSION }}-1.el7.x86_64.rpm
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}

  Install-Test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: get amd64.deb
        uses: actions/download-artifact@v3
        with:
          name: amd64.deb
          path: packages

      - name: get amd64.rpm
        uses: actions/download-artifact@v3
        with:
          name: amd64.rpm
          path: packages

      - name: DEB Install and test
        run: |
          source build/info
          ls -lab packages
          tag=${Version}
          echo $PWD
          pwd_path=$PWD
          docker run -itd -v ${pwd_path}:${pwd_path} --name ubuntuInstance --env TZ=Asia/Shanghai --env DEBIAN_FRONTEND=noninteractive --net="host" docker.io/ubuntu:20.04 /bin/bash
          echo Apt update...
          docker exec -t ubuntuInstance bash -c "apt-get update &> /dev/null; apt-get install -y -q sudo wget tzdata>/dev/null; \
            echo minecraftctl installing...; \
            sudo apt install -y -q ${pwd_path}/packages/minecraftctl_${Version}_amd64.deb | grep 'minecraftctl'; \
            echo minecraftctl installed...;\
            sudo minecraftctl help;\
            cat /etc/minecraftctl/config | grep --color '^export GamePath=\"\${HOME}/Minecraft\"$';\
            sed '\$a\export ScreenName=Test' /etc/minecraftctl/config > ~/config.bak; ls ~\
            apt remove -y minecraftctl; echo \$?\
            mkdir /etc/minecraftctl; ls /etc; cp ~/config.bak /etc/minecraftctl/config;\
            sudo apt install -y -q ${pwd_path}/packages/minecraftctl_${Version}_amd64.deb | grep 'minecraftctl';\
            cat /etc/minecraftctl/config | grep --color '^export ScreenName=\"Test\"$';"

      - name: RPM Install and test
        run: |
          source build/info
          ls -lab packages
          tag=${Version}
          echo $PWD
          pwd_path=$PWD
          docker run -itd -v ${pwd_path}:${pwd_path} --name centos7Instance --net="host" docker.io/centos:7.9.2009 /bin/bash
          echo yum update...
          docker exec -t centos7Instance bash -c "yum install -y http://mirror.math.princeton.edu/pub/epel/7/x86_64/Packages/a/aria2-1.34.0-5.el7.x86_64.rpm > /dev/null; \
            yum install -y ${pwd_path}/packages/minecraftctl-${Version}-1.el7.x86_64.rpm | grep 'minecraftctl' | grep -v '\[#* *\]'; \
            minecraftctl help;\
            cat /etc/minecraftctl/config | grep --color '^export GamePath=\"\${HOME}/Minecraft\"$';\
            sed '\$a\export ScreenName=Test' /etc/minecraftctl/config > ~/config.bak;\
            yum remove -y minecraftctl | grep 'minecraftctl' | grep -v '\[#* *\]';\
            mkdir /etc/minecraftctl; cp ~/config.bak /etc/minecraftctl/config;\
            yum install -y ${pwd_path}/packages/minecraftctl-${Version}-1.el7.x86_64.rpm | grep 'minecraftctl' | grep -v '\[#* *\]';\
            cat /etc/minecraftctl/config | grep --color '^export ScreenName=\"Test\"$';"

  Linux-Universal-Installation-and-testing:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup run environment
        run: |
          source build/info
          sudo apt install -y ${Depends//,/ }
          export TZ=Asia/Shanghai;
          export DEBIAN_FRONTEND=noninteractive;
          sudo apt update>/dev/null;
          sudo apt install -y -q sudo wget tzdata openjdk-8-jre-headless>/dev/null;
          curl -s https://adoptopenjdk.jfrog.io/artifactory/deb/pool/main/a/adoptopenjdk-8-openj9-jre/adoptopenjdk-8-openj9-jre_8u292-b10.openj9-0.26.0-3_amd64.deb -o ~/adoptopenjdk-8-openj9-jre.deb>/dev/null;
          sudo sudo apt install -y ~/adoptopenjdk-8-openj9-jre.deb>/dev/null;
          rm ~/adoptopenjdk-8-openj9-jre.deb;

      - name: Install old-minecraftctl
        run: |
          sudo build/Universal.sh install
          minecraftctl help

      - name: Update minecraftctl
        run: |
          sudo sed -i 's/GamePath=".*"/GamePath="Test"/' /etc/minecraftctl/config
          sudo build/Universal.sh update
          grep Test /etc/minecraftctl/config
          if [ $? -ne 0 ]; then
            echo "Update config failed."
            exit 1
          fi
          minecraftctl help
          sudo build/Universal.sh uninstall

      - name: Install minecraftctl
        run: sudo build/Universal.sh install && minecraftctl help

      - name: Download Minecraft Server
        run: |
          minecraftctl install -h;
          mkdir -p ~/D_MCServer;
          cd ~/D_MCServer;
          minecraftctl install -i vanilla -c -v 1.16.5;
          ls -labh; cat minecraftctl.conf;

      - name: Uninstall minecraftctl
        run: sudo build/Universal.sh uninstall