# This is a basic workflow to help you get started with Actions
name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: 
      - master
      - dev
  pull_request:
    branches: 
      - master
      - dev

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
  #   # The type of runner that the job will run on
    runs-on: ubuntu-latest

  #   # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

  #     # 由于此处没有Tag, 所以Tag从配置文件中读取
      - name: Init
        run: |
          source build/info
          git log --pretty=format:"%s" -1>CHANGELOG.md
          echo "GITHUB_REF: ${GITHUB_REF}"
          mkdir packages
          bash build/master.sh

  #     # 构建deb包 
      - name: Build deb
        run: |
            source build/info
            tag=${Version}
            echo "tag: ${tag}"
            echo ${{ steps.init.outputs.TAG }}
            echo ${{ steps.init.outputs.VERSION }}
            pwd_path=`pwd`
            echo "pwd_path: ${pwd_path}"
            docker run -itd -v ${pwd_path}:${pwd_path} --name ubuntuInstance --net="host" docker.io/ubuntu:latest /bin/bash
            Architecture_T=(${Architecture//,/ })
            for Arch in ${Architecture_T[@]}; do
              work_path="${pwd_path}/build/deb/${Arch}"
              #tag=${GITHUB_REF/refs\/tags\//}
              echo "work_path: ${work_path}"
              docker exec -t ubuntuInstance mkdir -p ${work_path}/usr/sbin ${work_path}/{opt,etc}
              docker exec -t ubuntuInstance cp -r ${pwd_path}/bin ${work_path}/opt/minecraftctl
              docker exec -t ubuntuInstance cp -r ${pwd_path}/bin/minecraftctl ${work_path}/usr/sbin/
              docker exec -t ubuntuInstance cp -r ${pwd_path}/cfg ${work_path}/etc/minecraftctl
              docker exec -t ubuntuInstance chmod 644 -R ${work_path}/etc/minecraftctl/*
              docker exec -t ubuntuInstance chmod 755 ${work_path}/etc/minecraftctl ${work_path}/etc/minecraftctl/theme ${work_path}/usr/sbin/minecraftctl
              docker exec -t ubuntuInstance chmod 755 -R ${work_path}/opt/minecraftctl ${work_path}/DEBIAN
              docker exec -t ubuntuInstance dpkg -b ${work_path} ${pwd_path}/packages/minecraftctl_${tag//v/}_${Arch}.deb
            done
            ls -lab
            docker kill -s KILL ubuntuInstance
            docker rm ubuntuInstance

  #     # 构建rpm包
  #     - name: Build-rpm
  #       if: startsWith(github.ref, 'refs/tags/')
  #       run: |
  #         work_path=`pwd`
  #         tag=`grep -e "^Version" rpm/SPECS/minecraftctl.spec | sed 's/Version:[ \t]*//g'`
  #         #tag=${GITHUB_REF/refs\/tags\//}
  #         echo ${tag}
  #         docker run -itd -v ${work_path}:${work_path} --name centos7Instance --net="host" docker.io/centos:7 /bin/bash
  #         docker exec -t centos7Instance mkdir -p /root/rpmbuild/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}
  #         docker exec -t centos7Instance cp -r ${work_path}/bin /root/rpmbuild/
  #         docker exec -t centos7Instance cp -r ${work_path}/cfg /root/rpmbuild/
  #         docker exec -t centos7Instance cp ${work_path}/rpm/SPECS/minecraftctl.spec /root/rpmbuild/SPECS/
  #         echo install rpmdevtools ing...
  #         docker exec -t centos7Instance yum install -y rpmdevtools>/dev/null
  #         echo install rpmdevtools Finish.
  #         docker exec -t centos7Instance rpmbuild --target x86_64 -bb /root/rpmbuild/SPECS/minecraftctl.spec
  #         docker exec -t centos7Instance cp /root/rpmbuild/RPMS/x86_64/minecraftctl-${tag//v/}-1.el7.x86_64.rpm ${work_path}/
  #         docker kill -s KILL centos7Instance
  #         docker rm centos7Instance

      # 上传包以在多个作业中共享
      - uses: actions/upload-artifact@v3
        name: upload amd64.deb
        with:
          name: amd64.deb
          path: packages/minecraftctl_*_amd64.deb
          if-no-files-found: error

      - uses: actions/upload-artifact@v3
        name: upload i386.deb
        with:
          name: i386.deb
          path: packages/minecraftctl_*i386.deb
          if-no-files-found: error
      # Releases(这个字段是用于发布的字段)
      # - name: Releases
      #   if: startsWith(github.ref, 'refs/tags/')
      #   uses: softprops/action-gh-release@v1 
      #   with:
      #     body_path: CHANGELOG.md
      #     files: |
      #       minecraftctl_${{ steps.init.outputs.VERSION }}_x86_64.deb
      #       minecraftctl-${{ steps.init.outputs.VERSION }}-1.el7.x86_64.rpm
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}

  Run-Test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: amd64.deb
          path: packages/

      - name: Init
        run: |
          source build/info
          ls -lab packages
          sudo dpkg -i packages/minecraftctl_${Version}_amd64.deb
          minecraftctl help

      - name: Download Minecraft Server
        run: |
          minecraftctl install -h
          mkdir -p MCServer; cd MCServer
          minecraftctl install -i mohist -c -v 1.16.5

  # cleanup:
  #   runs-on: ubuntu-latest
  #   needs: Run-Test
  #   steps:
  #     - uses: geekyeggo/delete-artifact@v2
  #       with:
  #         name: packages
  Linux-Universal-Installation:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup run environment
        run: sudo apt-get install -y sudo bash screen vim aria2 curl wget tar zip unzip

      - name: Install old-minecraftctl
        run: |
          sudo build/Universal.sh install
          minecraftctl help

      - name: Update minecraftctl
        run: |
          sudo sed -i 's/GamePath=".*"/GamePath="Test"/' /etc/minecraftctl/config
          sudo build/Universal.sh update
          grep Test /etc/minecraftctl/config
          if [ $? -ne 0 ]; then
            echo "Update config failed."
            exit 1
          fi
          minecraftctl help
          sudo build/Universal.sh uninstall

      - name: Install minecraftctl
        run: sudo build/Universal.sh install && minecraftctl help && sudo build/Universal.sh uninstall
