# This is a basic workflow to help you get started with Actions

name: Releases

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: 
      - master
    tags:
      - 'v*.*.*'
  pull_request:
    branches: 
      - master
    tags:
      - 'v*.*.*'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Init
        id: init
        run: |
          git log --pretty=format:"%s" -1>CHANGELOG.md
          echo ::set-output name=TAG::${GITHUB_REF/refs\/tags\//}
          echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\/v/}

      # 构建deb包 
      - name: Build-deb
        if: startsWith(github.ref, 'refs/tags/')
        run: |
            ls -lab
            # echo ${{ steps.init.outputs.TAG }}
            # echo ${{ steps.init.outputs.VERSION }}
            work_path=`pwd`
            tag=${GITHUB_REF/refs\/tags\//}
            docker run -itd -v ${work_path}:${work_path} --name ubuntuInstance --net="host" docker.io/ubuntu:latest /bin/bash
            docker exec -t ubuntuInstance mkdir -p ${work_path}/deb/usr/sbin ${work_path}/deb/{opt,etc}
            docker exec -t ubuntuInstance cp -r ${work_path}/bin ${work_path}/deb/opt/minecraftctl
            docker exec -t ubuntuInstance cp -r ${work_path}/bin/minecraftctl ${work_path}/deb/usr/sbin/
            docker exec -t ubuntuInstance cp -r ${work_path}/cfg ${work_path}/deb/etc/minecraftctl
            docker exec -t ubuntuInstance chmod 644 -R ${work_path}/deb/etc/minecraftctl/*
            docker exec -t ubuntuInstance chmod 755 ${work_path}/deb/etc/minecraftctl ${work_path}/deb/etc/minecraftctl/theme ${work_path}/deb/usr/sbin/minecraftctl
            docker exec -t ubuntuInstance chmod 755 -R ${work_path}/deb/opt/minecraftctl ${work_path}/deb/DEBIAN
            docker exec -t ubuntuInstance dpkg -b ${work_path}/deb ${work_path}/minecraftctl_${tag//v/}_x86_64.deb
            docker kill -s KILL ubuntuInstance
            docker rm ubuntuInstance

      # 构建rpm包
      - name: Build-rpm
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          work_path=`pwd`
          tag=${GITHUB_REF/refs\/tags\//}
          docker run -itd -v ${work_path}:${work_path} --name centos7Instance --net="host" docker.io/centos:7 /bin/bash
          docker exec -t centos7Instance mkdir -p /root/rpmbuild/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}
          docker exec -t centos7Instance cp -r ${work_path}/bin /root/rpmbuild/
          docker exec -t centos7Instance cp -r ${work_path}/cfg /root/rpmbuild/
          docker exec -t centos7Instance cp ${work_path}/rpm/SPECS/minecraftctl.spec /root/rpmbuild/SPECS/
          echo install rpmdevtools ing...
          docker exec -t centos7Instance yum install -y rpmdevtools>/dev/null
          echo install rpmdevtools Finish.
          docker exec -t centos7Instance rpmbuild --target x86_64 -bb /root/rpmbuild/SPECS/minecraftctl.spec
          docker exec -t centos7Instance cp /root/rpmbuild/RPMS/x86_64/minecraftctl-${tag//v/}-1.el7.x86_64.rpm ${work_path}/
          docker kill -s KILL centos7Instance
          docker rm centos7Instance

      # Releases
      - name: Releases
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          body_path: CHANGELOG.md
          files: |
            minecraftctl_${{ steps.init.outputs.VERSION }}_i386.deb
            minecraftctl-${{ steps.init.outputs.VERSION }}-1.el7.x86_64.rpm
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
