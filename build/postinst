#!/bin/bash
###
 # @Date: 2023-08-13 16:39:57
 # @LastEditors: MemoryShadow
 # @LastEditTime: 2023-09-13 09:59:42
 # @Description: 升级后还原并升级配置信息
 # Copyright (c) 2023 by MemoryShadow@outlook.com, All Rights Reserved.
### 

#*第零步, 将新的配置加载进内存
if [ -e /etc/minecraftctl/config.bak ]; then
  source /etc/minecraftctl/config.bak;
  # 创建一个缓存配置
  if ! declare -p Config_Cache >/dev/null 2>&1; then
    declare -Ax Config_Cache=()
  fi
  #*第一步, 升级原有配置文件
  while read -r line || [[ -n ${line} ]]; do
    if [[ ${line} == "export"* ]]; then
      Key=${line%=*}; Key=${Key#* };
      Value=${line#*=};
      # 过滤器过滤指定的Key并重定向或做出调整
      case ${Key} in
      screen_name|ScreenName)
        Key="ScreenName";
        ;;
      startCache|StartCache)
        Key="StartCache";
        ;;
      authlib|Authlib)
        Key="Authlib";
        ;;
      authlib_injectorVer|AuthlibInjector)
        Key="AuthlibInjector";
        ;;
      *)
        # 默认情况下也是原样输出
        echo "export ${Key}=${Value}";
        ;;
      esac
      Config_Cache[${Key}]=${Value};
    else echo ${line}; fi
  done < "/etc/minecraftctl/config.bak" > /etc/minecraftctl/config2
  #*第二步, 将配置文件没有写入的部分写入配置文件
  Cache='';
  while read -r line || [[ -n ${line} ]]; do
    if [[ ${line} == "export"* ]]; then
      # 如果以export开头, 就匹配检查是否被处理过
      Key=${line%=*}; Key=${Key#* };
      Value=${line#*=};
      if [ -z "${Config_Cache["${Key}"]}" ]; then
        echo -e "${Cache}";
        echo "export ${Key}=${Value}";
      fi
      Cache='';
    else
      # 如果不以export开头, 就将其写入注释缓存中
      Cache="${Cache}${Cache:+\n}${line}";
    fi
  done < "/etc/minecraftctl/config" >> /etc/minecraftctl/config2
  rm /etc/minecraftctl/config.bak
fi